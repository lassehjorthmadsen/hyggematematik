---
title: "Kombinatorik"
format:
  html:
    code-fold: true
    code-summary: "Show the code"
---

```{r setup}
library(tidyverse)
library(igraph)
```

## Hvad er kombinatorik?

Kombinatorik handler om,  hvordan man tæller, hvor mange muligheder man har, når man vælger og sammensætter ting.

Her er nogle eksempler:

-   På hvor mange måder kan man vælge én elevrepræsentant fra en klasse med 25 elever? (Svaret er $25$, og det er okay, hvis du synes, det var lovlig nemt.)

-   Hvis jeg på en restaurant kan vælge mellem tre forskellige forretter, tre forskellige hovedretter og tre forskellige desserter, på hvor mange måder kan jeg så sammensætte en menu? (Svaret er $3 \cdot 3 \cdot 3 = 27$)

-   På hvor mange måde kan man vælge et festudvalg på tre personer fra en klasse med 25 elever? (Svaret er $25 \cdot 24 \cdot 23 = 13800$, og det er okay, hvis du syntes, det var lidt svært.)

-   Hvor mange forskellige pokerhænder findes der, hvis vi ved, at en hånd består af 5 kort trukket fra et spil med 52 kort? (Svaret er $2.598.960$ og det er ret svært at regne ud -- men når du er færdig med kapitlet her, er det faktisk ikke *så* svært.)

## Begreberne

Som med meget matematik er en stor del af tricket i kombinatorik at være skarp på, *præcist* hvad der menes i en eller anden opgave eller problem. Når vi vælger ting, bruger vi for eksempel begreberne *med* og *uden* tilbagelægning. Og vi taler om valg, som er *ordnet* eller *uordnet*. Hvad betyder det så?

-   *Med tilbagelægning*: Det kalder vi det, når vi kan vælge den samme ting flere gange. I nogle tilfælde er det helt klart, om det er med eller uden tilbagelægning: Vi kan for eksempel ikke vælge den samme person til festudvalget to gange. Men når vi blander fredagsslik, kan vi godt tage to stykker af vores yndlingsvingummi. Hvis vi er på restaurant er det lidt mere usikkert hvad reglerne er: Vi kan nok godt få lov til at vælge en dessert både som forret, hovedret og dessert, men det er ikke så almindeligt, og normalt tager vi én forret, én hovedret og én dessert.

-   *Uden tilbagelægning*: Det er når vi *ikke* kan vælge den samme ting flere gange. Vi nævnte festudvalge før, hvor hver person kun kan være med én gang. Det samme gælder for et fodboldhold, der kan kun være én Lionel Messi på holdet. Hvis du laver en hitliste over dine fem yndlingsmusikere, mener vi normalt også fem *forskellige*, du kan ikke have Taylor Swift på både 1., 2., 3., 4., og 5. pladsen.

-   *Ordnet*: Handler om, hvorvidt *rækkefølgen* betyder noget. På hitlisten gør det (normalt) en forskel hvem der ligger nummer 1, og hvem der ligger nummer 5. Hvis man sætter hold til en landskamp betyder det noget om man er på holdet eller ej, men ikke noget om træneren har valgt én som den første eller sidste. (Det er lidt anderledes, hvis man med holdopstilling også mener, hvem der spiller hvilken *position*. Det er derfor det er vigtigt at være skarp på, hvad man *præcist* mener, både når man stiller en matematikopgave og når man løser den.)

-   *Uordnet*: Det kalder vi det, når rækkefølgen *ikke* betyder noget. Hvis du blander slik, betyder det for eksempel ikke noget, hvilken rækkefølge du vælger slikket i -- det bliver jo alligvel rystet sammen hulter til bulter i posen.

Vi kan lave en oversigt over begreberne i et skema som det her:

|                     | Ordnet          | Uordnet         |
|---------------------|-----------------|-----------------|
| Med tilbagelægning  | Kombinationslås | Bland-selv-slik |
| Uden tilbagelægning | Hitliste        | Lotto-tal       |

: Fire typer af problemer i kombinatorik {tbl-colwidths="\[34,33,33\]"}

\
Af skemaet kan vi se, at der på denne måde er i alt fire typer af problemer.

Kombinationslåsen er hvis man for eksempel vil vide, hvor mange mulige koder der på en lås med fire cifre fra 0-9. Rækkefølgen betyder noget, fordi koden 1234 ikke er det samme som 4321. Derfor er valget af kode *ordnet*. Og det er *med* tilbagelægning fordi det godt kan lade sig gøre at vælge det sammme ciffer flere gange; man kan altså godt have koden 1219. 

Bland-selv-slik, hitlisten og lotto-tallene er *eksempler* på de tre andre forskellige typer af problemer fra kombinatorikken.

## Formlerne

Lad os se på, *hvordan* vi finder løsningen, når vi først har fundet ud af hvilket *type* problem vi har med at gøre. 

### Ordnet, med tilbagelægning

Lad os starte med kombinatoriske problemer der handler om *ordnet* udvælgelse, *med* tilbagelægning. Som jeg nævnte før, kunne det for eksempel være en kombinationslås. Nogle låse har fire ringe, hver med cifrene 0-9. Hvis en cykeltyv skulle prøve at åbne en lås ved at prøve sig frem, hvor lang tid ville det så tage?

Hvis der kun var én ring, ville der selvfølgelig være 10 muligheder: 0, 1, 2, 3, 4, 5, 6, 7, 8 og 9. Hvis der var *to* ringe, ville koden til første ring stadig kunne vælges på 10 måder, og for hver af de 10 måder ville anden ring stadig kunne vælges på 10 måder. Derfor ville det samlede antal kombinationer være $10 \cdot 10 = 10^2 = 100$. 

Hvis vi skrev alle mulighederne op, ville det se sådan her ud:

```{r}
#| results: asis
expand_grid(a = 0:9, b = 0:9) |> mutate(combo = paste0(a, b)) |> pull(combo) |> paste(collapse = ", ") |> cat()
```

Hvis der var *tre* ringe, ville tredje ring også have 10 muligheder, for *hver* af de 100 muligheder på de to første ringe. Derfor skulle vi gange med 10 en gang til, for at finde det samlede antal kombinationer: $10 \cdot 10 \cdot 10 = 10^3 = 1000$.

Du kan måske godt se, hvad der sker, når vi har fire ringe? Jep, vi ganger med 10 en gang til: $10 \cdot 10 \cdot 10 \cdot 10 = 10^4 = 10.000$

Så en cykellås med 10 cifre på hver af fire ringe, har 10.000 mulige kombinationer. Hvis det tager i gennemsnit 2 sekunder for en cykeltyv at prøve en kombination, tager det i alt 20.000 sekunder at prøve alle kombinationer. Det er det samme som $\frac{2000}{60\ sekunder} \approx 333\ minutter$ eller $\frac{\frac{2000}{60\ sekunder}}{60} \approx 6\ timer$

Tyven skal selvfølgelig være heldig at finde den rigtige kombination hurtigere, men det tager altså stadigvæk næsten 3 timer at nå bare halvdelen af alle mulige kombinationer.

Det er derfor, de fleste cykeltyve løfter cyklen op i en bil og klipper låsen op med en boltsaks. Det også derfor, der ikke findes cykellåse med kun én ring og 10 kombinationer.

Matematik handler om at løse ting *generelt*. Det betyder, at vi ikke nødvendigvis er interesserede i cykellåse med netop 4 ringe og netop 10 cifre på hver ring. Lad os sige, at vi står med en lås der har $n$ ringe og $k$ cifre på hver ring. Det samlede antal kombinationer er så bare: $n^k$

For "vores" cykellås fra før, var $n=10$ og $k=4$ og vi fandt derfor $10^4=10.000$ mulige kombinationer. 

Hvis vi havde haft en lås med *tre* ringe og bogstaver i stedet for tal, ville der havde været $29^3 = 24.389$ forskellige kombinationer, fordi der findes 29 bogstaver (når vi tæller æ, ø og å med).

Hvis man både kunne bruge store og små bogstaver ville der være $2 \cdot 29 = 58$ bogstaver at vælge imellem og antallet af kombinationer ville være meget større: $58^3 = 195.112$

Hvad nu hvis vi designede en lås beregnet til folk, som ikke kan læse tal og bogstaver, og vi i stedet brugte farver? Vi ville nok ikke have lyst til alt for mange farver, for så ville de minde for meget om hinanden. Lad os sige, vi ville lave en lås, hvor hver ring havde fire farvemuligheder: Rød, grøn, gul og blå.

Hvor mange ringe skulle vi have, for at få mindst 10.000 kombinationer, ligesom i det første eksempel? Lad os prøve med en ligning:

$4^k > 10000$

Hvor $k$ er antallet af ringe. Den type ligning lærte vi at løse i kapitlet @sec-logaritmer. Kort fortalt er tricket bare at tage logaritmen på begge sider:

$log(4^k) > log(10000)$

Herfra kan vi bruge regnereglen, $log(x^n) = n \cdot log(x)$ og få:

$k \cdot log(4) > log(10000)$

Flytter vi lidt rundt og bruger lommeregneren finder vi:

$k  > \frac{log(10000)}{log(4)} > 6{,}6$

En lås med fire farver skal altså have syv ringe får at nå op på mere end 10,000 kombinationer. (Vi kan hurtigt tjekke hvor mange kombinationer det giver, sådan her: $4^7 = 16.384$. Vi kan også tjekke, at 6 ringe ikke havde været nok: $4^6 = 4096$)

### Ordnet, uden tilbagelægning

+---------------------+---------------------+------------------------------------------------+
|                     | Ordnet              | Uordnet                                        |
+=====================+=====================+================================================+
| Med tilbagelægning  | $n^k$               | $\binom{n+k-1}{k} = \frac{(n+k-1)!}{k!(n-1)!}$ |
+---------------------+---------------------+------------------------------------------------+
| Uden tilbagelægning | $\frac{n!}{(n-k)!}$ | $\binom{n}{k} = \frac{n!}{k!(n-k)!}$           |
+---------------------+---------------------+------------------------------------------------+

: Formler for beregning af kombinationer {tbl-colwidths="\[34,33,33\]"}

## Tælletræet

```{r tælletræ}
#| fig-height: 5
#| fig-width: 11

par(mar = c(0, 0, 0, 0)) # No margin
g <- make_graph(edges = c(1, 2, 1, 3, 2, 4, 2, 5, 2, 6, 3, 7, 3, 8, 3, 9), n = 9, directed = FALSE)

angle <- 2 * pi * 0.75
rotation <- matrix(c(cos(angle), sin(angle), -sin(angle), cos(angle)), ncol = 2)
layout <- layout_as_tree(g, root = 1) %*% rotation

V(g)$color <- "lightblue"
V(g)$label <- c("Bukser", "T-shirt", "T-shirt", paste("Outfit", 6:1))
E(g)$label <- c("Blå", "Sort", "Grøn", "Gul", "Rød", "Grøn", "Gul", "Rød")

V(g)$frame.color <- NA
V(g)$size = 30
plot(g, layout = layout)
```

## Kast med to terninger

Når vi kaster to terninger, får vi forskellige kombinationer afhængigt af, hvilket tal der kommer på hver terning. Her er en oversigt over alle de mulige kombinationer:

+-----------+-------------------+---------+---------+---------+---------+---------+
| **Første\ | **Anden terning   | **\     | **\     | **\     | **\     | **\     |
| terning** |\                  | 2**     | 3**     | 4**     | 5**     | 6**     |
|           |1**                |         |         |         |         |         |
|           |                   |         |         |         |         |         |
+===========+===================+=========+=========+=========+=========+=========+
| **1**     | **1-1**           | 1-2     | 1-3     | 1-4     | 1-5     | 1-6     |
+-----------+-------------------+---------+---------+---------+---------+---------+
| **2**     | 2-1               | **2-2** | 2-3     | 2-4     | 2-5     | 2-6     |
+-----------+-------------------+---------+---------+---------+---------+---------+
| **3**     | 3-1               | 3-2     | **3-3** | 3-4     | 3-5     | 3-6     |
+-----------+-------------------+---------+---------+---------+---------+---------+
| **4**     | 4-1               | 4-2     | 4-3     | **4-4** | 4-5     | 4-6     |
+-----------+-------------------+---------+---------+---------+---------+---------+
| **5**     | 5-1               | 5-2     | 5-3     | 5-4     | **5-5** | 5-6     |
+-----------+-------------------+---------+---------+---------+---------+---------+
| **6**     | 6-1               | 6-2     | 6-3     | 6-4     | 6-5     | **6-6** |
+-----------+-------------------+---------+---------+---------+---------+---------+

: Alle kombinationer ved kast med to terninger {tbl-colwidths="\[17,14,14,14,14,14,14\]"}

\

Som tabellen viser, er der i alt **36 forskellige kombinationer** når vi kaster to terninger. Hver kombination er lige så sandsynlig - der er $\frac{1}{36}$ chance for at få præcis "3-5" eller en hvilken som helst anden bestemt kombination.

De **fremhævede kombinationer** på diagonalen (1-1, 2-2, 3-3, 4-4, 5-5, 6-6) er de såkaldte "dobbelte" - hvor begge terninger viser det samme tal. Bemærk at der kun er én måde at få hver dobbelt på, mens der er to måder at få andre summer på (f.eks. kan man få summen 5 både som 2-3 og som 3-2).

## Opgaver

**Opgave 1:** På hvor mange måder kan man blande 10 stykker slik ud af de 100 forskellige stykker kiosken har?

::: {.callout-tip collapse="true" title="Vis svar"}
Dette er et problem med *uordnet* udvælgelse *med* tilbagelægning, da:
- Rækkefølgen af slik i posen er ligegyldig (uordnet)
- Man kan vælge flere af samme slags slik (med tilbagelægning)

Vi bruger formlen: $\binom{n+k-1}{k} = \binom{100+10-1}{10} = \binom{109}{10}$

```{r}
# Beregning af antallet af måder at blande slik
n <- 100  # antal forskellige slags slik
k <- 10   # antal stykker slik vi vælger

# Formlen for uordnet med tilbagelægning
resultat <- choose(n + k - 1, k)
cat("Antallet af måder:", format(resultat, big.mark = ".", decimal.mark = ","))
```
:::

**Opgave 2:** Hvis en restaurant har 5 forretter, 8 hovedretter og 4 desserter, på hvor mange måder kan du sammensætte en komplet menu?

::: {.callout-tip collapse="true" title="Vis svar"}
Dette er et simpelt multiplikationsproblem:
- Du skal vælge 1 forret ud af 5 muligheder
- Du skal vælge 1 hovedret ud af 8 muligheder
- Du skal vælge 1 dessert ud af 4 muligheder

```{r}
# Antal måder at sammensætte en menu
forretter <- 5
hovedretter <- 8
desserter <- 4

total_menus <- forretter * hovedretter * desserter
cat("Antal mulige menuer:", total_menus)
```
:::

**Opgave 3:** Hvor mange forskellige 4-cifret koder kan man lave, hvis alle cifre skal være forskellige?

::: {.callout-tip collapse="true" title="Vis svar"}
Dette er et problem med *ordnet* udvælgelse *uden* tilbagelægning:
- Rækkefølgen betyder noget (ordnet)
- Vi kan ikke bruge samme ciffer to gange (uden tilbagelægning)

Vi vælger 4 cifre ud af 10 mulige (0-9), hvor rækkefølgen betyder noget.

Formlen er: $\frac{n!}{(n-k)!} = \frac{10!}{(10-4)!} = \frac{10!}{6!}$

```{r}
# Beregning af antal 4-cifret koder med forskellige cifre
n <- 10  # antal cifre (0-9)
k <- 4   # antal cifre i koden

# Ordnet uden tilbagelægning
koder <- factorial(n) / factorial(n - k)
# Eller mere direkte:
koder_direkte <- 10 * 9 * 8 * 7

cat("Antal mulige koder:", format(koder, big.mark = ".", decimal.mark = ","))
cat("\nDirekte beregning:", format(koder_direkte, big.mark = ".", decimal.mark = ","))
```
:::